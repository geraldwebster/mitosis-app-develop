// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Qoot Basic 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<div>
  <input data-name=\\"input-1\\" />

  Hello! I can run in React, Vue, Solid, or Liquid!
</div>
<script>
  (() => {
    const state = { name: \\"Steve\\" };

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='input-1']\\").forEach((el) => {
        el.value = state.name;
        el.removeEventListener(\\"input\\", onInput1Input);
        el.addEventListener(\\"input\\", onInput1Input);
      });
    }

    // Event handler for 'input' event on input-1
    function onInput1Input(event) {
      state.name = event.target.value;
      markDirty(this)();
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Button 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<span data-name=\\"show\\">
  <a data-name=\\"a-1\\">
    <span data-name=\\"div-1\\"><!-- props.text --></span>
  </a>
</span>

<span data-name=\\"show-2\\">
  <button type=\\"button\\" data-name=\\"button-1\\">
    <span data-name=\\"div-2\\"><!-- props.text --></span>
  </button>
</span>

<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='show']\\").forEach((el) => {
        el.style.display = props.link ? \\"inline\\" : \\"none\\";
      });

      document.querySelectorAll(\\"[data-name='a-1']\\").forEach((el) => {
        el.href = props.link;
        el.target = props.openLinkInNewTab ? \\"_blank\\" : undefined;
      });

      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.innerText = props.text;
      });

      document.querySelectorAll(\\"[data-name='show-2']\\").forEach((el) => {
        el.style.display = !props.link ? \\"inline\\" : \\"none\\";
      });

      document.querySelectorAll(\\"[data-name='div-2']\\").forEach((el) => {
        el.innerText = props.text;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Columns 1`] = `
"<div class=\\"builder-columns div-1\\">
  {% for column in columns %}
  <div class=\\"builder-column div-2\\">{{column.content}}</div>
  {% endfor %}
</div>
<style>
  .div-1 {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    line-height: normal;
  }
  .div-2 {
    flex-grow: 1;
  }
</style>
"
`;

exports[`Qoot CustomCode 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<div data-name=\\"div-1\\"></div>
<script>
  (() => {
    const state = {
      scriptsInserted: [],
      scriptsRun: [],
      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (state.scriptsInserted.includes(script.src)) {
                continue;
              }

              state.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (state.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                state.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },
    };
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.class =
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\");
        el.innerHTML = props.code;
      });
    }

    // Update with initial state on first load
    update();

    // onMount
    state.findAndRunScripts();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Embed 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<div data-name=\\"div-1\\"></div>
<script>
  (() => {
    const state = {
      scriptsInserted: [],
      scriptsRun: [],
      findAndRunScripts() {
        // TODO: Move this function to standalone one in '@builder.io/utils'
        if (elem && typeof window !== \\"undefined\\") {
          /** @type {HTMLScriptElement[]} */
          const scripts = elem.getElementsByTagName(\\"script\\");

          for (let i = 0; i < scripts.length; i++) {
            const script = scripts[i];

            if (script.src) {
              if (state.scriptsInserted.includes(script.src)) {
                continue;
              }

              state.scriptsInserted.push(script.src);
              const newScript = document.createElement(\\"script\\");
              newScript.async = true;
              newScript.src = script.src;
              document.head.appendChild(newScript);
            } else if (
              !script.type ||
              [
                \\"text/javascript\\",
                \\"application/javascript\\",
                \\"application/ecmascript\\",
              ].includes(script.type)
            ) {
              if (state.scriptsRun.includes(script.innerText)) {
                continue;
              }

              try {
                state.scriptsRun.push(script.innerText);
                new Function(script.innerText)();
              } catch (error) {
                console.warn(\\"\`CustomCode\`: Error running script:\\", error);
              }
            }
          }
        }
      },
    };
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.class =
          \\"builder-custom-code\\" + (props.replaceNodes ? \\" replace-nodes\\" : \\"\\");
        el.innerHTML = props.code;
      });
    }

    // Update with initial state on first load
    update();

    // onMount
    state.findAndRunScripts();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Form block 1`] = `
"<form validate=\\"{{validate}}\\" method=\\"{{method}}\\" name=\\"{{name}}\\"></form>
<style>
  .pre-1 {
    padding: 10px;
    color: red;
    text-align: center;
  }
</style>
"
`;

exports[`Qoot Image 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<picture data-name=\\"picture-1\\">
  <span data-name=\\"show\\">
    <img class=\\"img-1\\" data-name=\\"img-1\\" />
  </span>

  <source data-name=\\"source-1\\" />
</picture>

<slot></slot>

<style>
  .img-1 {
    opacity: 1;
    transition: opacity 0.2s ease-in-out;
    object-fit: cover;
    object-position: center;
  }
</style>
<script>
  (() => {
    const state = {
      scrollListener: null,
      imageLoaded: false,
      load: false,
      setLoaded() {
        state.imageLoaded = true;
        markDirty(this)();
      },
      isBrowser() {
        return (
          typeof window !== \\"undefined\\" &&
          window.navigator.product != \\"ReactNative\\"
        );
      },
      useLazyLoading() {
        // TODO: Add more checks here, like testing for real web browsers
        return !!props.lazy && state.isBrowser();
      },
    };
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='show']\\").forEach((el) => {
        el.style.display =
          !state.useLazyLoading() || state.load ? \\"inline\\" : \\"none\\";
      });

      document.querySelectorAll(\\"[data-name='img-1']\\").forEach((el) => {
        el.alt = props.altText;
        el.setAttribute(
          aria - role,
          props.altText ? \\"presentation\\" : undefined
        );
        el.class = \\"builder-image\\" + (props.class ? \\" \\" + props.class : \\"\\");
        el.src = props.image;
        el.removeEventListener(\\"load\\", onImg1Load);
        el.addEventListener(\\"load\\", onImg1Load);
        el.srcset = props.srcset;
        el.sizes = props.sizes;
      });

      document.querySelectorAll(\\"[data-name='source-1']\\").forEach((el) => {
        el.srcset = props.srcset;
      });
    }

    // Event handler for 'load' event on img-1
    function onImg1Load(event) {
      state.setLoaded();
    }

    // Update with initial state on first load
    update();

    // onMount
    if (state.useLazyLoading()) {
      // throttled scroll capture listener
      const listener = () => {
        if (pictureRef) {
          const rect = pictureRef.getBoundingClientRect();
          const buffer = window.innerHeight / 2;

          if (rect.top < window.innerHeight + buffer) {
            state.load = true;
            markDirty(this)();
            state.scrollListener = null;
            markDirty(this)();
            window.removeEventListener(\\"scroll\\", listener);
          }
        }
      };

      state.scrollListener = listener;
      markDirty(this)();
      window.addEventListener(\\"scroll\\", listener, {
        capture: true,
        passive: true,
      });
      listener();
    }
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Img 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<img data-name=\\"img-1\\" />
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='img-1']\\").forEach((el) => {
        Object.assign(el.style, {
          objectFit: props.backgroundSize || \\"cover\\",
          objectPosition: props.backgroundPosition || \\"center\\",
        });
        el.key = (Builder.isEditing && props.imgSrc) || \\"default-key\\";
        el.alt = props.altText;
        el.src = props.imgSrc;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Input block 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<input data-name=\\"input-1\\" />
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='input-1']\\").forEach((el) => {
        el.key =
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\";
        el.placeholder = props.placeholder;
        el.type = props.type;
        el.name = props.name;
        el.value = props.value;
        el.defaultValue = props.defaultValue;
        el.required = props.required;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot RawText 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<span data-name=\\"span-1\\"></span>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='span-1']\\").forEach((el) => {
        el.class = props.attributes?.class || props.attributes?.className;
        el.innerHTML = props.text || \\"\\";
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Section 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<section data-name=\\"section-1\\">
  <slot></slot>
</section>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='section-1']\\").forEach((el) => {
        Object.assign(
          el.style,
          props.maxWidth && typeof props.maxWidth === \\"number\\"
            ? {
                maxWidth: props.maxWidth,
              }
            : undefined
        );
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Select block 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<select data-name=\\"select-1\\">
  <span data-name=\\"for\\"></span>
  <template data-template-for=\\"for\\">
    <option data-name=\\"option-1\\">
      <span data-name=\\"div-1\\"><!-- option.name || option.value --></span>
    </option>
  </template>
</select>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='select-1']\\").forEach((el) => {
        el.value = props.value;
        el.key =
          Builder.isEditing && props.defaultValue
            ? props.defaultValue
            : \\"default-key\\";
        el.defaultValue = props.defaultValue;
        el.name = props.name;
      });

      document.querySelectorAll(\\"[data-name='for']\\").forEach((el) => {
        let array = props.options;
        let template = document.querySelector('[data-template-for=\\"for\\"]');
        renderLoop(el, array, template, \\"option\\");
      });

      document.querySelectorAll(\\"[data-name='option-1']\\").forEach((el) => {
        el.value = getContext(el, \\"option\\").value;
      });

      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.innerText =
          getContext(el, \\"option\\").name || getContext(el, \\"option\\").value;
      });
    }

    // Update with initial state on first load
    update();

    // Helper to render loops
    function renderLoop(el, array, template, itemName) {
      el.innerHTML = \\"\\";
      for (let value of array) {
        let tmp = document.createElement(\\"span\\");
        tmp.innerHTML = template.innerHTML;
        Array.from(tmp.children).forEach(function (child) {
          contextMap.set(child, {
            ...contextMap.get(child),
            [itemName]: value,
          });
          el.appendChild(child);
        });
      }
    }

    // Helper to pass context down for loops
    let contextMap = new WeakMap();
    function getContext(el, name) {
      let parent = el;
      do {
        let context = contextMap.get(parent);
        if (context && name in context) {
          return context[name];
        }
      } while ((parent = parent.parentNode));
    }
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Stamped.io 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<div>
  <button data-name=\\"button-1\\">Write a review</button>

  <span data-name=\\"show\\">
    <input placeholder=\\"Email\\" />

    <input placeholder=\\"Title\\" class=\\"input-1\\" />

    <textarea
      placeholder=\\"How was your experience?\\"
      class=\\"textarea-1\\"
    ></textarea>

    <button class=\\"button-1\\" data-name=\\"button-2\\">Submit</button>
  </span>

  <span data-name=\\"for\\"></span>
  <template data-template-for=\\"for\\">
    <div class=\\"review\\">
      <img class=\\"img-1\\" data-name=\\"img-1\\" />

      <div>
        <div>
          <span data-name=\\"div-1\\"><!-- review.author --></span>
        </div>

        <div>
          <span data-name=\\"div-2\\"><!-- review.reviewMessage --></span>
        </div>
      </div>
    </div>
  </template>
</div>
<style>
  .input-1 {
    display: block;
  }
  .textarea-1 {
    display: block;
  }
  .button-1 {
    display: block;
  }
  .review {
    margin: 10px;
    padding: 10px;
    background: white;
    display: flex;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  .img-1 {
    height: 30px;
    width: 30px;
    margin-right: 10px;
  }
</style>
<script>
  (() => {
    const state = { reviews: [], showReviewPrompt: false };
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='button-1']\\").forEach((el) => {
        el.removeEventListener(\\"click\\", onButton1Click);
        el.addEventListener(\\"click\\", onButton1Click);
      });

      document.querySelectorAll(\\"[data-name='show']\\").forEach((el) => {
        el.style.display = state.showReviewPrompt ? \\"inline\\" : \\"none\\";
      });

      document.querySelectorAll(\\"[data-name='button-2']\\").forEach((el) => {
        el.removeEventListener(\\"click\\", onButton2Click);
        el.addEventListener(\\"click\\", onButton2Click);
      });

      document.querySelectorAll(\\"[data-name='for']\\").forEach((el) => {
        let array = state.reviews;
        let template = document.querySelector('[data-template-for=\\"for\\"]');
        renderLoop(el, array, template, \\"review\\");
      });

      document.querySelectorAll(\\"[data-name='img-1']\\").forEach((el) => {
        el.src = getContext(el, \\"review\\").avatar;
      });

      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.innerText = getContext(el, \\"review\\").author;
      });

      document.querySelectorAll(\\"[data-name='div-2']\\").forEach((el) => {
        el.innerText = getContext(el, \\"review\\").reviewMessage;
      });
    }

    // Event handler for 'click' event on button-1
    function onButton1Click(event) {
      state.showReviewPrompt = true;
      markDirty(this)();
    }

    // Event handler for 'click' event on button-2
    function onButton2Click(event) {
      state.showReviewPrompt = false;
      markDirty(this)();
    }

    // Update with initial state on first load
    update();

    // onMount
    fetch(
      \`https://stamped.io/api/widget/reviews?storeUrl=builder-io.myshopify.com&apiKey=\${
        props.apiKey || \\"pubkey-8bbDq7W6w4sB3OWeM1HUy2s47702hM\\"
      }&productId=\${props.productId || \\"2410511106127\\"}\`
    )
      .then((res) => res.json())
      .then((data) => {
        state.reviews = data.data;
        markDirty(this)();
      });

    // Helper to render loops
    function renderLoop(el, array, template, itemName) {
      el.innerHTML = \\"\\";
      for (let value of array) {
        let tmp = document.createElement(\\"span\\");
        tmp.innerHTML = template.innerHTML;
        Array.from(tmp.children).forEach(function (child) {
          contextMap.set(child, {
            ...contextMap.get(child),
            [itemName]: value,
          });
          el.appendChild(child);
        });
      }
    }

    // Helper to pass context down for loops
    let contextMap = new WeakMap();
    function getContext(el, name) {
      let parent = el;
      do {
        let context = contextMap.get(parent);
        if (context && name in context) {
          return context[name];
        }
      } while ((parent = parent.parentNode));
    }
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Submit button block 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<button type=\\"submit\\" data-name=\\"button-1\\">
  <span data-name=\\"div-1\\"><!-- props.text --></span>
</button>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.innerText = props.text;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Text 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<div data-name=\\"div-1\\"></div>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='div-1']\\").forEach((el) => {
        el.contentEditable = allowEditingText || undefined;
        el.innerHTML = props.text || props.content || \\"\\";
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Textarea 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<textarea data-name=\\"textarea-1\\"></textarea>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='textarea-1']\\").forEach((el) => {
        el.placeholder = props.placeholder;
        el.name = props.name;
        el.value = props.value;
        el.defaultValue = props.defaultValue;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;

exports[`Qoot Video 1`] = `
Object {
  "files": Array [
    Object {
      "content": "<video preload=\\"none\\" data-name=\\"video-1\\"></video>
<script>
  (() => {
    const state = {};
    let props = {};

    // Function to update data bindings and loops
    // call update() when you mutate state and need the updates to reflect
    // in the dom
    function update() {
      document.querySelectorAll(\\"[data-name='video-1']\\").forEach((el) => {
        Object.assign(el.style, {
          width: \\"100%\\",
          height: \\"100%\\",
          ...props.attributes?.style,
          objectFit: props.fit,
          objectPosition: props.position,
          // Hack to get object fit to work as expected and
          // not have the video overflow
          borderRadius: 1,
        });
        el.key = props.video || \\"no-src\\";
        el.poster = props.posterImage;
        el.autoPlay = props.autoPlay;
        el.muted = props.muted;
        el.controls = props.controls;
        el.loop = props.loop;
      });
    }

    // Update with initial state on first load
    update();
  })();
</script>
",
      "path": "index.html",
    },
  ],
}
`;
